// ðŸ“˜ Dart Functions: A Comprehensive Guide

// --------------------------------------------------
// 1. Regular Function
// --------------------------------------------------
// ðŸ”¹ Definition:
// A function that performs a task when called.
// ðŸ”¹ Syntax:
// void functionName() { ... }
// ðŸ”¹ Example:
void greet() {
  print('Hello!');
}
// ðŸ”¹ Usage:
void regularFunctionUsage() {
  greet();
  // Expected Output: Hello!
}

// --------------------------------------------------
// 2. Function with Parameters
// --------------------------------------------------
// ðŸ”¹ Definition:
// Accepts input values (parameters) to work with.
// ðŸ”¹ Syntax:
// void functionName(parameterType parameterName) { ... }
// ðŸ”¹ Example:
void greetUser(String name) {
  print('Hello, $name!');
}
// ðŸ”¹ Usage:
void functionWithParametersUsage() {
  greetUser('Alice');
  // Expected Output: Hello, Alice!
}

// --------------------------------------------------
// 3. Arrow Function
// --------------------------------------------------
// ðŸ”¹ Definition:
// A concise syntax for functions with a single expression.
// ðŸ”¹ Syntax:
// returnType functionName(parameters) => expression;
// ðŸ”¹ Example:
int square(int x) => x * x;
// ðŸ”¹ Usage:
void arrowFunctionUsage() {
  print(square(4));
  // Expected Output: 16
}

// --------------------------------------------------
// 4. Function with Optional Parameters
// --------------------------------------------------
// ðŸ”¹ Definition:
// Parameters that are not required during function call.
// ðŸ”¹ Syntax:
// void functionName([type param = defaultValue]) { ... }
// ðŸ”¹ Example:
void sayHello([String name = 'Guest']) {
  print('Hello, $name');
}
// ðŸ”¹ Usage:
void optionalParametersUsage() {
  sayHello();       // Expected Output: Hello, Guest
  sayHello('John'); // Expected Output: Hello, John
}

// --------------------------------------------------
// 5. Named Parameters
// --------------------------------------------------
// ðŸ”¹ Definition:
// Parameters specified by name and usually optional.
// ðŸ”¹ Syntax:
// void functionName({type param1, type param2}) { ... }
// ðŸ”¹ Example:
void printInfo({String name = 'Unknown', int age = 0}) {
  print('Name: $name, Age: $age');
}
// ðŸ”¹ Usage:
void namedParametersUsage() {
  printInfo(name: 'Alice', age: 25);
  // Expected Output: Name: Alice, Age: 25
}

// --------------------------------------------------
// 6. Return Values
// --------------------------------------------------
// ðŸ”¹ Definition:
// Returns data to the caller.
// ðŸ”¹ Syntax:
// returnType functionName(parameters) { return value; }
// ðŸ”¹ Example:
int multiply(int a, int b) {
  return a * b;
}
// ðŸ”¹ Usage:
void returnValueUsage() {
  int result = multiply(2, 3);
  print(result);
  // Expected Output: 6
}

// --------------------------------------------------
// 7. Implicit Return Type
// --------------------------------------------------
// ðŸ”¹ Definition:
// Dart infers the return type from the expression.
// ðŸ”¹ Syntax:
// functionName(parameters) => expression;
// ðŸ”¹ Example:
bool isEven(int num) => num % 2 == 0;
// ðŸ”¹ Usage:
void implicitReturnUsage() {
  print(isEven(4));
  // Expected Output: true
}

// --------------------------------------------------
// 8. No Return Value (Void)
// --------------------------------------------------
// ðŸ”¹ Definition:
// Function that does not return any value.
// ðŸ”¹ Syntax:
// void functionName(parameters) { ... }
// ðŸ”¹ Example:
void log(String message) {
  print('Log: $message');
}
// ðŸ”¹ Usage:
void voidFunctionUsage() {
  log('App started');
  // Expected Output: Log: App started
}

// --------------------------------------------------
// 9. Higher-Order Functions
// --------------------------------------------------
// ðŸ”¹ Definition:
// Functions that take other functions as arguments or return them.
// ðŸ”¹ Syntax:
// void functionName(Function param) { ... }
// ðŸ”¹ Example:
void executeTwice(Function f) {
  f();
  f();
}
// ðŸ”¹ Usage:
void higherOrderFunctionUsage() {
  executeTwice(() => print('Hello'));
  // Expected Output: Hello
  //                  Hello
}

// --------------------------------------------------
// 10. Lexical Closures
// --------------------------------------------------
// ðŸ”¹ Definition:
// Functions that capture and remember variables from their scope.
// ðŸ”¹ Syntax:
// Function functionName() { ... return () { ... }; }
// ðŸ”¹ Example:
Function makeCounter() {
  int count = 0;
  return () {
    count++;
    print(count);
  };
}
// ðŸ”¹ Usage:
void lexicalClosureUsage() {
  var counter = makeCounter();
  counter(); // Expected Output: 1
  counter(); // Expected Output: 2
}

// --------------------------------------------------
// 11. Generator Functions
// --------------------------------------------------
// ðŸ”¹ Definition:
// Functions that lazily produce a sequence of values using `sync*`.
// ðŸ”¹ Syntax:
// Iterable<Type> functionName() sync* { yield value; }
// ðŸ”¹ Example:
Iterable<int> countToThree() sync* {
  yield 1;
  yield 2;
  yield 3;
}
// ðŸ”¹ Usage:
void generatorFunctionUsage() {
  for (var i in countToThree()) {
    print(i);
    // Expected Output: 1, 2, 3
  }
}

// --------------------------------------------------
// Main Function: Run All Examples
// --------------------------------------------------
void main() {
  regularFunctionUsage();
  functionWithParametersUsage();
  arrowFunctionUsage();
  optionalParametersUsage();
  namedParametersUsage();
  returnValueUsage();
  implicitReturnUsage();
  voidFunctionUsage();
  higherOrderFunctionUsage();
  lexicalClosureUsage();
  generatorFunctionUsage();
}
